import streamlit as st
from causalimpact import CausalImpact
import pandas as pd
from helpers import st_helpers as sth
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import ga4py.add_tracker as add_tracker
from ga4py.custom_arguments import MeasurementArguments

def extract_start_and_end(data_for_ci):
    # Pull start and end dates at this point to be certain they match
    pre_period = data_for_ci[~data_for_ci["test_period"]]
    pre_data_start = pre_period["test_period"].index.min()
    pre_data_end = pre_period["test_period"].index.max()
    pre_dates = [pre_data_start, pre_data_end]

    post_period = data_for_ci[data_for_ci["test_period"]]
    post_data_start = post_period["test_period"].index.min()
    post_data_end = post_period["test_period"].index.max()
    post_dates = [post_data_start, post_data_end]

    return pre_dates, post_dates

def clean_columns(data_for_ci):

    # Rename regressor columns to match expected format
    rename_dictionary = {}
    renamed_list = []
    for index, col in enumerate(st.session_state.regressor_col_list):
        name = "X"
        if index != 0:
            name = f"X{index}"
        rename_dictionary[col] = name
        renamed_list.append(name)
    data_for_ci.rename(columns=rename_dictionary, inplace=True)

    # Cut down to just the columns we need for the impact estimate
    cols_to_keep = [c for c in data_for_ci.columns if c=="y" or c in renamed_list]

    data_for_ci = data_for_ci[cols_to_keep]

    # Ensure all info is numerical, no n/a
    data_for_ci = data_for_ci.apply(pd.to_numeric)
    data_for_ci = data_for_ci.fillna(0)
    return data_for_ci

@add_tracker.analytics_hit_decorator
def get_ci(data_for_ci, pre_dates, post_dates) -> None:
    # Only run if haven't run before
    ci = CausalImpact(
        data_for_ci, 
        pre_dates, 
        post_dates, 
        )
    st.session_state.ci = ci

def run_causal_impact():
    data = st.session_state.cleaned_data
    data_for_ci = data.copy(deep = True)
    data_for_ci["time"] = data_for_ci["time"]

    data_for_ci.set_index('time', inplace=True)

    # Make sure data is always in the right order
    data_for_ci.sort_index(inplace=True)

    pre_dates, post_dates = extract_start_and_end(data_for_ci)

    data_for_ci = clean_columns(data_for_ci)


    # Run Causal Impact analysis including the holiday indicators as part of the data

    if st.session_state.ci == None:
        tracking_args_dict = st.session_state.basic_tracking_info
        tracking_args_dict["skip_stage"] = ["start", "end"]
        tracking_args_dict["stage"] = "measure_impact"

        get_ci(
            data_for_ci = data_for_ci, 
            pre_dates = pre_dates, 
            post_dates = post_dates,
            ga4py_args_remove = tracking_args_dict)
    
    ci = st.session_state.ci
    
    if ci is None:
        raise ValueError("Something seems to have gone wrong - CausalImpact model didn't initialise correctly!")
    else:
        print("CausalImpact model initialized.")

    # Add in Plotly charts
    show_charts_with_plotly(ci)

    # Add download button to download 
    csv = sth.convert_df(ci.inferences, index = True)

    st.markdown(f"""
-------------
                        
### Download data

                        
Click download to download your Causal Impact data.

If you want a way to visualise your data, you can download the plot above as a png by clicking on the "download plot" button just above the chart.

Or you can use [Dave Westby's blog post here to create your own chart with this data in Google Sheets.](https://aira.net/blog/forecasting-and-importance-of-uncertainty/)

""")


    st.download_button(
    f"Download data",
    csv,
    f"causal impact data%.csv",
    f"causal impact data%/csv",
    key='download-csv'
    )

    more_detail = st.expander(label= "More detail", expanded=False)
    with more_detail:

        fig = ci.plot()

        st.markdown("## Original Causal Impact charts generated by library")

        # Capture the current Matplotlib figure generated by CausalImpact
        fig = plt.gcf()

        # Display the plot in Streamlit
        st.pyplot(fig)


        st.markdown("## Summary report generated by Causal Impact")
        st.write(ci.summary('report'))


def show_charts_with_plotly(ci):
    # Ensure observed_data is defined before referencing it
    observed_data = ci.data['y']  # Assuming 'y' is your observed column in the original dataset
    
    # Adjusting the approach to determine the intervention date
    # Convert the start of the post-period to a Timestamp, if not already one
    intervention_start = pd.to_datetime(ci.post_period[0])
    
    # Dropping the first few rows from inferences as needed
    inferences = ci.inferences.iloc[5:]  # Assuming dropping rows doesn't affect the intervention date calculation
    
    # For observed and predicted values during the entire period
    predicted_data = inferences['preds']
    preds_lower = inferences['preds_lower']
    preds_upper = inferences['preds_upper']
    
    # Adjust indices for plotting, if necessary
    observed_index_adjusted = observed_data.index[5:]  # Adjust index if you've dropped rows from observed_data
    
    # Chart 1: Entire Period - Observed vs. Predicted with Confidence Intervals
    fig1 = go.Figure()
    fig1.add_trace(go.Scatter(x=observed_index_adjusted, y=observed_data.iloc[5:], mode='lines', name='Observed'))
    fig1.add_trace(go.Scatter(x=predicted_data.index, y=predicted_data, mode='lines', name='Predicted'))
    fig1.add_trace(go.Scatter(x=preds_lower.index, y=preds_lower, mode='lines', name='CI Lower', line=dict(width=0)))
    fig1.add_trace(go.Scatter(x=preds_upper.index, y=preds_upper, mode='lines', name='CI Upper', line=dict(width=0), fill='tonexty'))
    fig1.add_vline(x=intervention_start, line=dict(color="red", width=2, dash="dot"), name="Intervention")
    fig1.update_layout(title='Observed vs. Predicted with Confidence Intervals', xaxis_title='Time', yaxis_title='Value', legend_title='Legend')

    st.markdown("""
# Causal Impact output
                
## Comparison chart

These charts show the output from Causal Impact.
                
This first chart is a comparison to actual performance compared to forecast performance. 

Because we made a change - we *expect* the actual performance to differ from expected after the change.
                
However, if the confidence intervals (the shaded area) is **very** big before the change, that is a sign that your model might not be working very well so watch out for that.
                                
                """)

    
    # Display Chart 1
    st.plotly_chart(fig1)

    # Or adjust the DataFrame to focus on post-intervention data
    post_intervention_inferences = inferences.loc[intervention_start:]

    # Calculate the cumulative difference (Impact) starting from the intervention date
    cumulative_difference = (post_intervention_inferences['post_cum_y'] - post_intervention_inferences['post_cum_pred'])

    # Calculate adjusted confidence intervals for the cumulative difference
    cumulative_difference_lower = cumulative_difference + post_intervention_inferences['post_cum_pred_lower'] - post_intervention_inferences['post_cum_pred']
    cumulative_difference_upper = cumulative_difference + post_intervention_inferences['post_cum_pred_upper'] - post_intervention_inferences['post_cum_pred']

    st.markdown("""
## Cumulative difference chart
                                
This second chart is showing the estimated cumulative difference since the date you made the change.
                
Basically if actual performance is considerably higher than expected performance, it'll show a line that's going up and to the right. If that is the case and the shaded area does *not* cross "0" then there is a good chance that the change had a positive impact.
                
If the actual performance is lower than expected, then the line will be going down. If that's the case and the shaded area doesn't cross 0 then it's a good chance the change had a negative impact.
                
                """)

    # Chart 2: Post-Intervention Cumulative Impact and Confidence Intervals
    fig2 = go.Figure()

    # Adding trace for the cumulative difference (Impact)
    fig2.add_trace(go.Scatter(x=post_intervention_inferences.index, y=cumulative_difference, mode='lines', name='Cumulative Difference'))

    # Adding traces for the adjusted confidence intervals
    fig2.add_trace(go.Scatter(x=post_intervention_inferences.index, y=cumulative_difference_lower, mode='lines', name='CI Lower', line=dict(width=0)))
    fig2.add_trace(go.Scatter(x=post_intervention_inferences.index, y=cumulative_difference_upper, mode='lines', name='CI Upper', line=dict(width=0), fill='tonexty'))

    fig2.update_layout(title='Post-Intervention Cumulative Difference', xaxis_title='Time', yaxis_title='Cumulative Difference', legend_title='Legend')

    # Display Chart 2
    st.plotly_chart(fig2)

    st.write("Check out the 'More Detail' section section for the original charts produced by Causal Impact, and an automated test writeup from the library (it's a little maths-y but you might still find it useful).")